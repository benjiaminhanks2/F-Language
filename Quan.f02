
  #KeyState        b" x1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678 " ; 按鍵狀態，用於處理組合鍵
  #KeyStateExt     b" x1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678 " ; 擴展鍵的按鍵狀態
  #ExtendedKey     b" xxx " ; 擴展鍵標誌
  #KeyboardLED     b" xxx " ; 鍵盤指示燈，下面三個掩碼對應三個不同的指示燈

  ;特殊鍵的ScanCode
  #KEY_LeftShift   042 ;
  #KEY_RightShift  054 ;
  #KeyboardState   b" xxx " ; 按鍵狀態，處理Shift ALT CTRL等組合鍵

  // ;從鍵盤讀取一個按鍵，返回在AX中
  // ;AL=按鍵的ASCII碼，如果是控制碼，返回0
  // ;AH=按鍵的ScanCode
  // ;DH=KeyboardLED
  // ;DL=KeyboardState
  // ReadKey PROC
  //         PUSH DS
  //         PUSH BX
  //         PUSH CX
  //         PUSH DI
  //         PUSH SI
  //         PUSH CS
  //         POP DS          ;切換數據段
  // NoKey:
  //         XOR AX,AX
  //         STI
  //         CLI             ;關中斷，防止讀寫按鍵的同時出現其他中斷

* #cli_nop_sti \ [ -- ]
    b" xxxxxxxx " ##inline_assembly if
    \ $CC b, \ int3
      $FA b, \ CLI
      $90 B, \ NOP   I think if there are many pending IRQ may we need many NOPs ?
      $90 B, \ NOP
      $FB b, \ STI
      $cb b, \ retf
    endif farcall ;

  
  //         IN AL,64H
  //         TEST AL,01H     ;輪詢按鍵消息
  //         JZ NoKey        ;沒有鍵按下或放開
  //         IN AL,60H
  
  #test do ##WaitKeyBoardScanCode .$ cr loop ;  ok !
  #WaitKeyBoardScanCode // [ -- ScanCode ]
     do
       ##Wait8042Data // Wait to receive next 8042 data [--WORD] FFxx form KB, 00xx from Mouse; Both directly from 8042
       dup $ff00 & if $ff & ret endif
       drop  // drop mouse data
     loop
  ;   
  
  #is_Extended_key dup $e0 == ; [code -- code flag]
  
  
  //         CMP AL,0E0H     ;判斷是否是擴展鍵
  //         JNE NoExtendedKey
           
           ExtendedKey = 1;    I guess so.
           
  // NoExtendedKey: <===================== I bet this is a mistake
  //         TEST AL,80H
  //         JZ KeyPressed   ;有鍵按下
  //         AND AL,7FH      ;有鍵放開，僅清除按鍵記錄
  
  #is_Break_Code   dup $80 &  ; [code -- code flag]
  
  //         MOV CL,1
  //         MOV BX,Offset KeyState      ; KeyState 表
  //         CMP [ExtendedKey], CL
  //         JNE NoExtendedKey1
          
          what to do with extendedkey here?
  
  // NoExtendedKey1:
  //         MOV DI,AX
  //         XOR CL,CL
  //         MOV [BX+DI],CL  ; 
  //         JMP NoKey       ;繼續讀取按鍵信息,直到有鍵按下為止
  
  //         ;有鍵放開
  // KeyPressed:
  //         ;記錄按鍵信息
  //         MOV CL,1
  //         MOV BX,Offset KeyState
  //         CMP [ExtendedKey], CL
  //         JNE NoExtendedKey2
  //         XOR CL,CL
  //         MOV [ExtendedKey], CL   ;清除擴展鍵記錄
  //         MOV BX,Offset KeyStateExt
  // NoExtendedKey2:
  //         MOV DI,AX
  //         MOV CL,1
  //         MOV [BX+DI],CL          ;記錄按鍵按下
  // NoLEDKey:
  //         ;處理Shift, 即不會將此類鍵返回
  //         CMP AL,KEY_LeftShift
  //         JE NoKey
  //         CMP AL,KEY_RightShift
  //         JE NoKey
  //         ;判斷Shift的轉義
  //         MOV BX,OFFSET KeyState
  //         MOV CL,[BX+Key_LeftShift]
  //         OR CL,[BX+Key_RightShift]
  //         MOV AH,AL               ;保存ScanCode
  //         CMP CL,0
  //         JNZ UseShiftSet         ;用轉義過後的字符集，即Scan2AsciiShift
  //         MOV BX, Offset Scan2Ascii
  //         JMP ChangeToAscii
  // 
  // UseShiftSet:
  //         MOV BX, Offset Scan2AsciiShift
  // ChangeToAscii:
  //         XLATB                   ; 查表，相當於 MOV AL,[BX+AL]
  //         ;處理DL的返回值
  //         MOV DH,KeyState[KEY_LeftShift]
  //         MOV DL,DH
  //         MOV DH,KEYState[KEY_RightShift]
  //         MOV CL,1
  //         SHL DH,CL
  //         OR DL,DH
  //         STI                     ;開中斷
  //         POP SI
  //         POP DI
  //         POP CX
  //         POP BX
  //         POP DS
  //         RET
  // ReadKey ENDP
  // 
  // ;主程序
  // Start:
  //         PUSH CS
  //         POP DS
  //         CALL ReadKey         ; return scan code in AL
  //         PUSH AX
  //         MOV DL,AL
  //         CMP DL,0
  //         JNE AsciiKey
  // 

  // AsciiKey:
  //         mov  ah,03h          ; Read Cursor Position and Size
  //         mov bh,00h           ; Display page number
  //         int 10h
  //         
  //         mov  ah,09h          ; Write Character and Attribute at Cursor   AL=ASCII value of character
  //         mov  bh,00h          ; Display page (text mode only)
  //         mov  cx,01h          ; Number of times to write character
  //         mov  bl,00001111b    ; Attribute/Color
  //         int  10h
  //         mov  ah,03h          ; Read Cursor Position and Size  
  //         mov bh,00h           ; Display page number            
  //         int 10h
  //         mov ah,02h           ; Set Cursor Position
  //         inc dl               ; Column
  //         int 10h                      

  #putc stdout 02 06 map funcall ; [ char -- ]
  
  //         POP AX
  //         CMP AL,01Bh              ;按$鍵退出
  //         JNZ Start
  // CODE    ENDS
  //         END Start
  
  
  f55 quan.f02 ##Scan2AsciiShiftTest
  #Scan2AsciiShiftTest
       0 >a do 
         a@ 0100 == ?break
         s" scan code %3d ASCII code %3d %02x %1c" a@ a@ ##Scan2AsciiShift dup dup 05 ##printf cr
       +loop a> drop 
  ;
  #Scan2AsciiShift // [ scan -- ASCII ]
     b" xxx!@#$%^&*()_+xxQWERTYUIOP{}xxASDFGHJKL:x~x|ZXCVBNM<>?x*xxx1234567890xx789-456+1230.xx............. " ##inline_assembly if
        0 b,           \ 00     DB      0
        $1b b,         \ 01     DB      01BH            ;ESC
        012 ##b,skip   \ 02     DB      '!@#$%^&*()_+'
        08 b, 09 b,    \ 14     DB      08H,09H         ;BACKSPACE, TAB
        012 ##b,skip   \ 16     DB      'QWERTYUIOP{}'
        $0d b, 0 b,    \ 28     DB      00DH,000H       ;ENTER, LEFT CONTROL
        010 ##b,skip   \ 30     DB      'ASDFGHJKL:'
        '" b, '~ b,    \ 40     DB      '"~'
        0 b,           \ 42     DB      000H            ;LEFT SHIFT
        '| b,          \ 43     DB      '|'
        010 ##b,skip   \ 44     DB      'ZXCVBNM<>?'
        0 b,           \ 54     DB      000H            ;RIGHT SHIFT
        '* b,          \ 55     DB      '*'             ;* in KEYPAD
        0 b,           \ 56     DB      000H            ;LEFT ALT
        ' b,           \ 57     DB      ' '
        0 b,           \ 58     DB      000H            ;CAPSLOCK
        0 b, 0 b, 0 b, 0 b, 0 b, 0 b, 0 b, 0 b, 0 b, 0 b, 
                       \ 59     DB      10 DUP(000H)    ;F1-F10
        0 b, 0 b,      \ 69     DB      000H,000H       ;NUMLOCK, SCROLL LOCK
        013 ##b,skip   \ 71     DB      '789-456+1230.' ;Keys in KEYPAD When NUMLOCK is on
        0 b, 0 b,      \ 84     DB      000H,000H       ;F11, F12
     endif swap drop + peek 
  ;
  
  f55 quan.f02 ##scan2asciiTest
  #Scan2AsciiTest
       0 >a do 
         a@ 0100 == ?break
         s" scan code %3d ASCII code %3d %02x %1c" a@ a@ ##Scan2Ascii dup dup 05 ##printf cr
       +loop a> drop 
  ;

  #Scan2Ascii // [ scan -- ASCII ]
     b" xxx1234567890-=xxqwertyuiop[]xxasdfghjkl;x`x\zxcvbnm,./x*x xxxxxxxxxxxxxxxx-xxx+xxxxxxx.................. " ##inline_assembly if
       $00 b,          \  0     DB      0                                        
       $1b b,          \  1     DB      01BH            ;ESC                     
       012 ##b,skip    \  2-13  DB      '1234567890-='                           
       $08 b, $09 b,   \ 14-15  DB      08H,09H         ;BACKSPACE, TAB          
       012 ##b,skip    \ 16-27  DB      'qwertyuiop[]'                           
       $0d b, $00 b,   \ 28-29  DB      00DH,000H       ;ENTER, LEFT CONTROL     
       010 ##b,skip    \ 30-39  DB      'asdfghjkl;'
       $27 b,          \ 40     DB      027H            ; '
       01 ##b,skip     \ 41     DB      '`'
       $00 b,          \ 42     DB      000H            ;LEFT SHIFT
       01 ##b,skip     \ 43     DB      '\'
       010 ##b,skip    \ 44-53  DB      'zxcvbnm,./'
       0 b,            \ 54     DB      000H            ;RIGHT SHIFT
       01 ##b,skip     \ 55     DB      '*'             ;* in KEYPAD
       0 b,            \ 56     DB      000H            ;LEFT ALT
       01 ##b,skip     \ 57     DB      ' '
       0 b,            \ 58     DB      000H            ;CAPSLOCK
       010 >a do a@ 0 == ?break 0 b, -loop a> drop  
       		       \ 59-68  DB      10 DUP(000H)    ;F1-F10
       0 b, 0 b,       \ 69-70  DB      000H,000H       ;NUMLOCK, SCROLL LOCK
       0 b, 0 b, 0 b,  \ 71-73  DB      0,0,0           ;Keys in KEYPAD
       01 ##b,skip     \ 74     DB      '-'             ;Keys in KEYPAD
       0 b, 0 b, 0 b,  \ 75-77  DB      0,0,0           ;Keys in KEYPAD
       01 ##b,skip     \ 78     DB      '+'             ;Keys in KEYPAD
       0 b, 0 b, 0 b, 0 b, 0 b, 
       		       \ 79-83  DB      0,0,0,0,0       ;Keys in KEYPAD
       0 b, 0 b,       \ 84-85  DB      000H,000H       ;F11, F12
     endif swap drop + peek 
  ;


  ~~~~~~~~~~~~~~ KBC basic tools ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  #IRQ1-  $21 dup i $02 | o ; [ -- ]
  #IRQ1+  $21 dup i $02 ~ &  o ; [ -- ]
  #IRQ12- $A1 dup i $10 | o ; [ -- ]
  #IRQ12+ $A1 dup i $10 ~ &  o ; [ -- ]
  #STATUS $64 i ; [ -- port64 status]
  #IBF?   ##STATUS $02 & ; [ -- IBF?]
  #OBF?   ##STATUS $01 & ; [ -- OBF?]
  #IBF-   ##IBF? not ?ret ##IBF? not ?ret ##IBF? not ?ret ##IBF? not ?ret
          09 wait ##IBF? if ." Wait IBF time out! " cr ##beep ##beep ##beep
          ##IRQ1+ exit endif ; [ -- ]
  #OBF+   ##OBF? ?ret ##OBF? ?ret ##OBF? ?ret ##OBF? ?ret
          09 wait ##OBF? not if ." Wait OBF time out! " cr ##beep ##beep ##beep
          ##IRQ1+ exit endif ; [ -- ]
  #OBF-   do 02 wait ##OBF? not ?break ##data> drop loop ;
  #CMD    ##OBF- ##IBF- $64 swap o ; [ cmd -- ]
  #DATA>  ##OBF+ $60 i ; [ -- port60 data]
  #>DATA  ##IBF- $60 swap o ; [ data to port60 -- ]    

  #Wait8042Data
    // Wait to receive next 8042 data
    // [--WORD] FFxx form KB, 00xx from Mouse; Both directly from 8042
    do ##STATUS dup $01 & if $21 & $21 == if 0 else $ff00 endif $60 i | break else drop endif loop ;
  #Get8042Data
    // receive next 8042 data
    // [--WORD] FFxx form KB, 00xx from Mouse; Both directly from 8042; 0000 if no data in 8042.
    09 wait ##STATUS dup $01 & if $21 & $21 == if 0 else $ff00 endif $60 i | break else drop 0 endif ;
  #Drop8042Data 010 wait do 02 wait ##OBF? not ?break $60 i .$ ."  " loop ; Drop all following key codes
  #show_keyboard_mouse_scan_code
    // Monitor mouse/keyboard data from 8042,
    // must install mouse driver if want to get mouse data
    // press 'd', 'e' to disable or enable ps/2 mouse
    ##IRQ12- ##IRQ1- do
      ##Wait8042Data dup dup .$ ."  " $FF00 & not if
        ##Wait8042Data .$ ."  "
        ##Wait8042Data .$
        $0B == if (d ##IRQ12+ ##IRQ1+ ret d) endif
      else dup $ff81 == if
          drop ##IRQ12+ ##IRQ1+ ret
        else
          // (d ##IRQ1+ stdin d)
          dup
          $ffA0 == if // 'd' to disable mouse A7 command
            ." Mouse clock disabled " ##IBF- $64 $A7 o
          endif
          $ff92 == if // 'e' to enable mouse A8 command
            ." Mouse clock enabled "  ##IBF- $64 $A8 o
          endif
        endif
      endif cr
    loop ;

  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  pmtools.f10a  F55    hcchen5600 2009/03/10 09:22 

  L I S T   O F   # # M A C R O s   I N   T H I S   S C R I P T   F I L E
  -------------------------------------------------------------------------------------------------------
  ##big_real_mode     Enter Big Unreal Mode. Then you can access entire 4G memory.
  ##PMode             Switch to protected mode
  ##RMode             Switch to real mode
  ##inline_assembly   Put embedded assembly code into a ##macro
  ##autoexec          In this .f file, it enalbes big_real_mode and allocates 64k buffer automatically.
  ##xDD               Dump 256 bytes memory from 4G memory spaces
  ##d                 Dump 16 bytes memroy, return new offset
  ##dd                Dump more
  ##ddd               and more
  ##dddd              and even more
  ##ddddd             ....
  ##EXC_HANDLER       Protected mode IRQs or Exceptions or Traps common service routine.
  ##GDTR              Read  GDTR [-- Limit low high]
  ##GDTR!             Write GDTR [Limit low high -- ]
  ##IDTR              Read  IDTR [-- Limit low high]
  ##IDTR!             Write IDTR [Limit low high -- ]
  ##farcoreleft       Check DOS's remaining memory
  ##farmalloc         Allocate memory from DOS
  ##printf            C language printf
  ##sprintf           C language sprintf
  ##KEY?              Any key pressed? 
  ##max               [ a b - max(a,b)] a b are int (signed)
  ##lsl               CPU LSL instruction. Load Segment Limit
  ##scasd             Use CPU SCASD instruction to find given dward data in the given real mode space.
  ##MOVSB             Move string byte for real mode. 配合 Apple II 的小技巧(如下)，就成了 fill 指令.
  ##BigRealMOVSB      Move a memory block in bytes  around 4G memory spaces 
  ##BigRealMOVSD      Move a memory block in dwords around 4G memory spaces
  ##STI               CPU STI instruction
  ##CLI               CPU CLI instruction
  ##halt              Use this macro to put QEMU and VMware DOS guest into power saving mode until any key pressed.
  ##xDS               Get executable DS for assembly code words
  ##init_descriptor_tables  // Setup GDT and IDT tables in ~.f script buffer
  -------------------------------------------------------------------------------------------------------

  ~~~~ Protected Mode High level tools ~~~~~~~~~~~~~~~~~~~~
  [ high low -- ] dump 256 bytes from given 32bit address. Enter Big Real Mode in prior using this macro.
  example: f54 pmtools.f10 $f $ff00 ##xdd <= dump BIOS ending 256 bytes
* #xdd
     ##64k_offset peekw ##64k_segment peekw
     dup 016 *                  // high low buffer_off buffer_seg 210S
     swap $1000 / swap          // high low buffer_off 000S 210S
     rot 0 swap                 // high low 000S 210S 0 buffer_off
     L+                         // high low buffer_hi buffer_lo
     0 0256 04 / ##BigRealMOVSD //
     ##64k_segment peekw ##64k_offset peekw ##dd // seg off+256
     drop drop
     ;

  // TUT10 trick, allow DS ES to access 4G bytes flat space  [ -- ]
* #big_real_mode
    // Make descriptor 10h a 4G flat space. ##PMode assigns it to DS and ES. That's what big_real_mode is.
    ##DS 016 * ##DS 04096 / $FFFF 0 ##ACS_DATA  ##ATTR_16bits_4Gmax ##&GDT $10 + ##setup_GDT_entry
    ##PMode
    ##RMode
  ;
* #PMode  // [ -- ]
    read_msw 01 & if
    ." We should be in real mode first ... "
    ."CPU is already in PMode. System out of my control. Abort." cr exit
    endif
    // Setting up the GDTR register
    016 08 * 01 -  // length of GDT is n * 8 bytes - 1 小心搞清楚 GDT 要多大，目前保留了 16 個。 -Hcchen5600 2008/12/14 下午3:37
    0 ##DS 016 L* 0 ##&GDT L+ swap ##GDTR!   // [limit low high --]
    ##cli
    // Setting up the IDTR register
    // 進 Protected Mode 之前做，離開後要清掉。記得先 ##CLI。
    // IRQ 即使不用也最好要設定好 IDTR。 F47 會處理 CPU exceptions，你一定和我一樣常出錯，靠 CPU Protection 幫你抓 bug 很有用。
    $22 08 * 01 -     // length of IDT is $22 * 8bytes (INT00~INT21h), limit = length-1
    0 ##DS 016 L* 0 ##&IDT L+ swap ##IDTR!  // [limit low high --]
    // Entering PMode
    ##&old_CS ##CS pokew  ##&old_DS ##DS pokew  ##&old_ES ##ES pokew  ##&old_SS ##SS pokew // save real mode segments
    $08 ##CS! $10 ##DS! $10 ##ES! $18 ##SS! read_cr0 01 | write_cr0 setregs
    // in PMode now [ length -- ]
    ;
* #RMode // [ -- ]
    // switching back to real mode
    read_cr0 $FFFE & write_cr0
    ##&old_SS peekw ##SS!  ##&old_ES peekw ##ES!  ##&old_DS peekw ##DS!  ##&old_CS peekw ##CS! // restore
    setregs
    // in real mode now
    // restore IDTR register
    $3FF 0 0 ##IDTR!
    ##STI
    ;

* #EXC_HANDLER  // [exc_no cs ip error --]
      // switching back to real mode
      read_cr0 $FFFE & write_cr0 ##&old_SS peekw ##SS! ##&old_ES peekw ##ES! ##&old_DS peekw ##DS! ##&old_CS peekw ##CS! setregs
      // restore IDTR register back to real mode before STI
      $3FF 0 0 ##IDTR! ##STI
      cr ." Welcome to my tiny blue screen ;-D " cr
      03 pick dup 04 roll &exc_has_error + peek // 0 or 1 that indicates whether this exception has an error code
      if
        ." Error code " .$ cr
      else
        drop ." This exception has no error code " cr
      endif
      swap ." at address  : " .$ ." :" .$ cr
      ." exception no: " .$ cr
      exit
  ;

  /* Segment desciptor definition */
  typedef struct {
     word limit,                    #GDT.limit    00 + ;
          base_l;                   #GDT.base_l   02 + ;
     byte base_m,                   #GDT.base_m   04 + ;
          access,                   #GDT.access   05 + ;
          attribs,                  #GDT.attribs  06 + ;
          base_h; } DESCR_SEG;      #GDT.base_h   07 + ;

  Don't change this line, it stores variables. ==> [ _gdt_base_low ww_ , _gdt_base_high ww_ , _gdt_limit_low ww_ , _gdt_limit_high ww_ , _gdt_access ww_ , _gdt_attribute ww_ , _gdt(n)_addr ww_ -- ]
* #setup_GDT_entry
    sfind @_gdt(n)_addr    swap pokew  // 土土地把 stack arguments 存成 variables
    sfind @_gdt_attribute  swap pokew
    sfind @_gdt_access     swap pokew
    sfind @_gdt_limit_high swap pokew
    sfind @_gdt_limit_low  swap pokew
    sfind @_gdt_base_high  swap pokew
    sfind @_gdt_base_low   swap pokew

    sfind @_gdt(n)_addr peekw ##GDT.attribs  sfind @_gdt_attribute peekw sfind @_gdt_limit_high peekw | poke
    sfind @_gdt(n)_addr peekw ##GDT.access   sfind @_gdt_access    peekw poke
    sfind @_gdt(n)_addr peekw ##GDT.limit    sfind @_gdt_limit_low peekw pokew
    sfind @_gdt(n)_addr peekw ##GDT.base_h   sfind @_gdt_base_high peekw >> >> >> >> >> >> >> >> poke
    sfind @_gdt(n)_addr peekw ##GDT.base_l   sfind @_gdt_base_low  peekw pokew
    sfind @_gdt(n)_addr peekw ##GDT.base_m   sfind @_gdt_base_high peekw $ff & poke
  ;

  /* Interrupt desciptor definition */
  typedef struct   {
    word offset_l,                  #IDT.offset_l    00 + ;
         selector;                  #IDT.selector    02 + ;
    byte param_cnt,                 #IDT.param_cnt   04 + ;
         access;                    #IDT.access      05 + ;
    word offset_h; } DESCR_INT;     #IDT.offset_h    06 + ;

  Don't change this line, it stores variables ==> [ _idt_selector ww~, _idt_offset_low ww~, _idt_offset_high ww~, _idt_access ww~, _idt_param_cnt ww~, _idt(n)_addr ww~ -- ]
* #setup_IDT_entry
    sfind @_idt(n)_addr     swap pokew  // 土土地把 stack arguments 存成 variables
    sfind @_idt_param_cnt   swap pokew
    sfind @_idt_access      swap pokew
    sfind @_idt_offset_high swap pokew
    sfind @_idt_offset_low  swap pokew
    sfind @_idt_selector    swap pokew
    sfind @_idt(n)_addr peekw ##IDT.param_cnt  sfind @_idt_param_cnt   peekw poke
    sfind @_idt(n)_addr peekw ##IDT.access     sfind @_idt_access      peekw poke
    sfind @_idt(n)_addr peekw ##IDT.offset_h   sfind @_idt_offset_high peekw pokew
    sfind @_idt(n)_addr peekw ##IDT.offset_l   sfind @_idt_offset_low  peekw pokew
    sfind @_idt(n)_addr peekw ##IDT.selector   sfind @_idt_selector    peekw pokew
  ;
* #init_descriptor_tables   // [ -- ] init GDT IDT , TUT04 TUT05 common

    // setup_GDT
    0 0 0 0 0 0 ##&GDT ##setup_GDT_entry
    ##CS 016 * ##CS 04096 / $FFFF 0 ##ACS_CODE  ##ATTR_16bits_1Mmax ##&GDT $08 + ##setup_GDT_entry
    ##DS 016 * ##DS 04096 / $FFFF 0 ##ACS_DATA  ##ATTR_16bits_1Mmax ##&GDT $10 + ##setup_GDT_entry
    ##SS 016 * ##SS 04096 / $FFFF 0 ##ACS_STACK ##ATTR_16bits_1Mmax ##&GDT $18 + ##setup_GDT_entry
    $8000      $000B        $FFFF 0 ##ACS_DATA  ##ATTR_16bits_1Mmax ##&GDT $20 + ##setup_GDT_entry
    ##DS 016 * ##DS 04096 / $FFFF 0 ##ACS_CODE  ##ATTR_16bits_1Mmax ##&GDT $40 + ##setup_GDT_entry // Executable DS copy for farcall assembly codes
    ##DS 016 * ##DS 04096 / $FFFF 0 ##ACS_DATA  ##ATTR_16bits_1Mmax ##&GDT $48 + ##setup_GDT_entry // reserved for ##pMOVEx  source
    ##DS 016 * ##DS 04096 / $FFFF 0 ##ACS_DATA  ##ATTR_16bits_1Mmax ##&GDT $50 + ##setup_GDT_entry // reserved for ##pMOVEx  destination

    // setup_IDT
    // setup_idt_entry [selector offset_low offset_high access param_cnt &idt(n) - ]  
    0 >a do
      $08 &isr_wrapper_table 02  a@ * + peekw 0 ##ACS_INT 0 ##&IDT 08 a@  * + ##setup_IDT_entry   // INT 00h ~ 21h
      a@ $21 == ?break
    +loop a> drop
  ;

  Read  GDTR [-- Limit low high]
* #GDTR 0 0 0 &tos 04 - read_gdtr ;

  Write GDTR [Limit low high -- ]
* #GDTR! &tos 04 - write_gdtr drop drop drop ;

  Read  IDTR [-- Limit low high]
* #IDTR 0 0 0 &tos 04 - read_idtr ;

  Write IDTR [Limit low high -- ]
* #IDTR! &tos 04 - write_idtr drop drop drop ;

  Save-Restore real mode system resources
  _old_CS_ xx #&old_CS sfind @_old_CS_ ;
  _old_DS_ xx #&old_DS sfind @_old_DS_ ;
  _old_ES_ xx #&old_ES sfind @_old_ES_ ;
  _old_SS_ xx #&old_SS sfind @_old_SS_ ;

  Memory allocations for GDT IDT
  _GDT_ 00      08      10      18      20      28      30      38      40      48      50      58      60      68      70      78   end
  _IDT_ 0       1       2       3       4       5       6       7       8       9       A       B       C       D       E       F    end
        12345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678
        12345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678
  #&GDT sfind @_GDT_ ;
  #&IDT sfind @_IDT_ ;

  ~~~~ Descripter (segment) definitions for protected mode programming ~~~~~~~~~~~~~~~~~~~~
  #ATTR_GRANULARITY_BYTE $00 ;
  #ATTR_GRANULARITY_4K   $80 ;
  #ATTR_32BIT        $40 ;
  #ATTR_16BIT        $00 ;

  #ATTR_16bits_1Mmax  ##ATTR_GRANULARITY_BYTE ##ATTR_16BIT | ;
  #ATTR_16bits_4Gmax  ##ATTR_GRANULARITY_4K   ##ATTR_16BIT | $f | ;
  #ATTR_32bits_4Gmax  ##ATTR_GRANULARITY_4K   ##ATTR_32BIT | $f | ;

  #ACS_PRESENT $80 ;  present segment
  #ACS_CSEG    $18 ;  code segment
  #ACS_DSEG    $10 ;  data segment
  #ACS_CONFORM $04 ;  conforming segment
  #ACS_READ    $02 ;  readable segment
  #ACS_WRITE   $02 ;  writable segment
  #ACS_RING0   $00 ;  ring 0
  #ACS_RING1   $20 ;  ring 1
  #ACS_RING2   $40 ;  ring 2
  #ACS_RING3   $60 ;  ring 3

  #ACS_CODE  ##ACS_PRESENT ##ACS_CSEG ##ACS_READ  ##ACS_RING0 | | | ;
  #ACS_DATA  ##ACS_PRESENT ##ACS_DSEG ##ACS_WRITE ##ACS_RING0 | | | ;
  #ACS_STACK ##ACS_PRESENT ##ACS_DSEG ##ACS_WRITE ##ACS_RING0 | | | ;

  #ACS_I_GATE16 $06 ; 16 bits interrupt gate
  #ACS_I_GATE32 ##ACS_INT_GATE16 $08 | ; 32 bits interrupt gate

  #ACS_INT  ##ACS_PRESENT ##ACS_I_GATE16 ##ACS_RING0 | | ;  present 16bits interrupt gate in ring0


  ~~~~~~~~~~ funcall words (C library) ~~~~~~~~~~~~~
* #farcoreleft // [ -- low high ] check DOS's remaining memory
     00 062 map funcall ;
* #farmalloc // [ high16 low16 -- offset segment ] get DOS's memory block
     swap 02 060 map funcall ;
* #printf  000 map funcall drop drop ;  [ string arg1 arg2 ... n -- ] printf , n is the number of given arguments
* #sprintf 002 map funcall drop ; [ dest string arg1 arg2 ... n1 -- n2 ] sprintf , n1 is the number of given arguments. n2 is length
  #far_malloc_test   010 >A do A@ NOT ?break $1 $0 ##farmalloc .$ .$ ."   "  ##farcoreleft .$ .$ cr -loop A> DROP ; [ -- ] Demo calling C library farmalloc() and farcoreleft()

  ~~~~~~~~~~ Useful Tools ~~~~~~~~~~~~~~~~~~~~~~~~~
* #KEY? $0100 ##iAX! $16 int86 ##FL $40 & if 0 ret endif $0000 ##iAX! $16 int86 ##oAX 01 ; [-- [AX] key?]
* #max over over < if swap endif drop ; [ a b - max] a b are int (signed)
  #.seg:off s" %04x:%04x " -rot 03 ##printf ; [ seg off -- ] print seg:off
  #dump16hex  // [ seg off -- seg off' ] print 16 hex, return new offset
    016 -rot do       \ 16 seg off
    over over fpeek   \ 16 seg off c
    s" %02x " swap 02 \ 16 seg off $ c 02
    ##printf          \ 16 seg off
    01 +              \ 16 seg off++
    rot 01 - dup      \ seg off++ 16-- 16--
    dup 08 == if ." - " endif
    0 == ?break       \ seg off++ 16--
    -rot              \ 16-- seg off++
    loop drop         \ seg off'
    ;
  #emit16  // [ seg off -- seg off' ] emit 16 characters, return new offset
    016 -rot do     \ 16 seg off
    over over fpeek \ 16 seg off c
    dup 032 < if drop '. endif \ c'
    s" %1c" swap 02 \ 16 seg off $ c 02
    ##printf        \ 16 seg off
    01 +            \ 16 seg off++
    rot 01 - dup    \ seg off++ 16-- 16--
    0 == ?break     \ seg off++ 16--
    -rot            \ 16-- seg off++
    loop drop       \ seg off'
    ;
* #d // [ seg off -- seg off' ] dump 16 bytes memroy, return new offset
    over over ##.seg:off over over ."  " ##dump16hex drop drop ."  " ##emit16 cr
    over over ##.seg:off over over ."  " ##dump16hex drop drop ."  " ##emit16 cr
    ;
* #dd    08 >A do A@ not ?break ##d -loop A> DROP ;
* #ddd   ##dd ##dd ##dd ##dd ;
* #dddd  ##ddd ##ddd ##ddd ##ddd ;
* #ddddd ##dddd ##dddd ##dddd ##dddd ##dddd ##dddd ##dddd ##dddd ##dddd ##dddd ##dddd ##dddd ##dddd ##dddd ##dddd ##dddd ;

  #64k_segment b" xxxx " ;
  #64k_offset  b" xxxx " ;
* #autoexec
    ." Init descriptor tables . . . " ##init_descriptor_tables ." done" cr
    ." Allocate 64k buffer for ##xD commands . . . "
    $0001 $0010 ##farmalloc    // [high low -- fp_off fp_seg]
    ##64k_segment swap    01 + pokew // adjust to segment+1:0000
    ##64k_offset  swap $fff0 & pokew
    ##64k_segment peekw 01 == if ." failed !!" exit else ." done" cr endif
    // ##big_real_mode
    clearcache
    ;

  ~~~~~~~~~~ farcall assembly code words (in data segment script buffer) ~~~~~~~~~~~~~

  // ##LSL  load segment limit
  // 範  例 : f54 lsl.f01 ##Big_real_mode ##PMode $10 ##lsl $40 ##lsl ##RMode .s
  // 講  解 : http://elearnwksrd.wistron.com.cn/xms/index.php?view=content_show&id=1019
* #lsl // [ descriptor -- (limit_high limit_low Yes) | No ] Load Segment Limit , returns segment limit in bytes and whether the given descriptor is legal.
    0 0 rot \ two dummy arguments
    b" xxxxxxxxxxxxxxxxxxxxxxxxxxxx " ##inline_assembly if
      // [ dummy[bx-4] dummy[bx-2] descriptor[bx] -- (limit_high[bx-4] limit_low[bx-2] Yes[bx]) | (dummy dummy No[bx]) ]
      $55 b,                       \ push   bp
      $89 b, $E5 b,                \ mov    bp,sp
      $8B b, $5E b, $06 b,         \ mov    bx,[bp+6]   ;<== TOS at [bp+6]
      $66 b, $0F b, $03 b, $07 b,  \ lsl    eax,[bx]    ; get limit to eax
      $9C b,                       \ pushf
      $66 b, $89 b, $47 b, $FC b,  \ mov    [bx-4],eax  ; [ low high ] need to swap later
      $8F b, $07 b,                \ POP    word [bx]   ; flag register
      $5D b,                       \ pop    bp
      $CB b,                       \ retf               ;<=== 注意!!! ret or retf
    endif farcall 
    $40 & if swap 01 else drop drop 0 endif // check ZF (bit 6)
    ;


  // ##scasd used CPU SCASD instruction to find given dward data in the given real mode space.
  // [ start_seg start_off length/4 target_low target_high -- (offset true) | false ]
  // Example : f54 pmtools.f10 $f000 $0 $4000 $535F $5F4D ##scasd .s <== 傳回 [ -- addr 1 ] f000:addr 果真指在 _SM_ 處
* #scasd
    b" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx " ##inline_assembly if
    \ $CC b,                        \ int3
      $55 b,                        \ push         bp
      $8B b, $EC b,                 \ mov          bp,sp
      $8B b, $5E b, $06 b,          \ mov          bx,[bp+06]
      $FC b,                        \ cld
      $8B b, $47 b, $F8 b,          \ mov          ax,[bx-08]
      $8E b, $C0 b,                 \ mov          es,ax
      $8B b, $7F b, $FA b,          \ mov          di,[bx-06]
      $8B b, $4F b, $FC b,          \ mov          cx,[bx-04]
      $66 b, $8B b, $47 b, $FE b,   \ mov          eax,[bx-02]
      $F2 b, $66 b, $AF b,          \ repnz scasd
      $89 b, $7F b, $F8 b,          \ mov          [bx-08],di
      $89 b, $4F b, $FA b,          \ mov          [bx-06],cx
      $5D b,                        \ pop          bp
      $CB b,                        \ retf
    endif // [ start_segment[bx-8] start_offset[bx-6] length[bx-4] target_low[bx-2] target_high[bx] -- di cx length target_low target_high ]
    farcall drop drop drop if 04 - 01 else drop 0 endif ;
  ;

  // ##MOVSB "move string byte" for real mode
  // [ from_seg[bx-8] from_off[bx-6] to_seg[bx-4] to_off[bx-2] length[bx] -- ]
  // Example : ##ds 0 ##64k_segment 0 $ffff ##MOVSB .s <== move DS to the 64k buffer
  //           ##ds $ff00 ##dd drop drop               <== check end of DS
  //           ##64k_segment peekw ##64k_offset peekw $ff00 + ##dd drop drop   <== check end of 64k buffer
  // The above example works fine ! hcchen5600 2009/03/06 11:04
  // 有了這個，配合 Apple II 的小技巧(如下)，就成了 fill 指令了,
  //    1. 先填要重複的幾個 byte 到 buffer 的開頭。
  //    2. from_start to_next_repeat lengh-repeat ##movsb, where from_start to_next_repeat means their segment and offset
  //    範例：把 5000:0000~003f 刷成 55 AA ....
  //       $5000 0 $55 fpoke $5000 01 $AA fpoke
  //       $5000 0 $5000 $2 $40 02 - ##movsb
  //       $5000 0 ##dd
* #MOVSB
    b" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxyyyy " ##inline_assembly if
      $CD b, $03 b,        \ int  3
      $55 b,               \ push bp
      $89 b, $E5 b,        \ mov  bp,sp
      $8B b, $5E b, $06 b, \ mov  bx,[bp+6]    ;<== TOS at [bp+6]
      $1E b,               \ push ds
      $06 b,               \ push es
      $FC b,               \ cld
      $8B b, $0F b,        \ mov  cx,[bx]      ; length
      $8B b, $77 b, $FA b, \ mov  si,[bx-6]    ; from_off
      $8B b, $7F b, $FE b, \ mov  di,[bx-2]    ; to_off
      $8B b, $47 b, $FC b, \ mov  ax,[bx-4]    ; to_seg
      $8E b, $C0 b,        \ mov  es,ax
      $8B b, $47 b, $F8 b, \ mov  ax,[bx-8]    ; from_seg
      $8E b, $D8 b,        \ mov  ds,ax        ; <== DS is the last one to be changed, or [bx] reference will be all wrong!
      $F3 b, $A4 b,        \ repz movsb
      $07 b,               \ pop  es
      $1F b,               \ pop  ds
      $5D b,               \ pop  bp
      $CB b,               \ retf
    endif farcall
    drop drop drop drop drop
  ;


  // ##BigRealMOVSB "move string byte" You need to enter big_real_mode in prior using this macro
  // [ from_high from_low to_high to_low length_high length_low -- ] all 3 arguments are 32 bit
  // Example : f54.exe pmtools.f10  $c $0 $10 $0 $4 $0 ##BigRealMOVSB .s <== 用 QEMU 或 Bochs 檢查 $100000~$13ffff 等於 C000:0 ~ F000:ffff
  //           f54.exe pmtools.f10 $10 $0 $10 $1 $4 $0 ##BigRealMOVSB .s <== 整片 $100000~$140001 都刷成與 $100000 同值, Apple II 的小技巧。
* #BigRealMOVSB
    swap >a >a swap >a >a swap a> a> a> a>  // high-low swap
    b" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxyyyy " ##inline_assembly if
      // [ from_low[bx-10] from_high[bx-8] to_low[bx-6] to_high[bx-4] length_low[bx-2] length_high[bx]  -- ]
      $55 b,        \ push bp
      $89 b, $E5 b, \ mov  bp,sp
      $8B b, $5E b, \
      $06 b,        \ mov  bx,[bp+6]    ;<== TOS at [bp+6]
      $1E b,        \ push ds
      $06 b,        \ push es           ;<== 注意!!! 常忘了 b,
      $FC b,        \ cld
      $66 b, $8B b, \
      $4F b, $FE b, \ mov  ecx,[bx-2]   ; length_low length_high
      $66 b, $8B b, \
      $77 b, $F6 b, \ mov  esi,[bx-10]  ; from_low from_high
      $66 b, $8B b, \
      $7F b, $FA b, \ mov  edi,[bx-6]   ; to_low to_high
      $31 b, $C0 b, \ xor  ax,ax
      $8E b, $C0 b, \ mov  es,ax
      $8E b, $D8 b, \ mov  ds,ax        ;<== 最後才動 DS 否則 [bx] 參考全部出錯！
      $67 b,        \ a32
      $F3 b, $A4 b, \ repz movsb
      $07 b,        \ pop  es
      $1F b,        \ pop  ds
      $5D b,        \ pop  bp
      $CB b,        \ retf              ;<=== 注意!!! ret or retf
    endif farcall
    drop drop drop drop drop drop
  ;

  // ##BigRealMOVSD "move string dword" You need to enter big_real_mode in prior using this macro
  // [ from_high from_low to_high to_low length_high length_low -- ] all 3 arguments are 32 bit
  // Example : f54.exe pmtools.f10  $c $0 $10 $0 $1 $0 ##BigRealMOVSD .s <== 用 QEMU 或 Bochs 檢查 $100000~$13ffff 等於 C000:0 ~ F000:ffff
  //           f54.exe pmtools.f10 $10 $0 $10 $4 $1 $0 ##BigRealMOVSD .s <== 整片 $100000~$140003 都刷成與 $100000 同值, Apple II 的小技巧。
* #BigRealMOVSD
    swap >a >a swap >a >a swap a> a> a> a>  // high-low swap
    b" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxyyyy " ##inline_assembly if
      // [ from_low[bx-10] from_high[bx-8] to_low[bx-6] to_high[bx-4] length_low[bx-2] length_high[bx]  -- ]
      $55 b,        \ push bp
      $89 b, $E5 b, \ mov  bp,sp
      $8B b, $5E b, \
      $06 b,        \ mov  bx,[bp+6]    ;<== TOS
      $1E b,        \ push ds
      $06 b,        \ push es           ;<== 注意!!! 常忘了 b,
      $FC b,        \ cld
      $66 b, $8B b, \
      $4F b, $FE b, \ mov  ecx,[bx-2]   ; length_low length_high
      $66 b, $8B b, \
      $77 b, $F6 b, \ mov  esi,[bx-10]  ; from_low from_high
      $66 b, $8B b, \
      $7F b, $FA b, \ mov  edi,[bx-6]   ; to_low to_high
      $31 b, $C0 b, \ xor  ax,ax
      $8E b, $C0 b, \ mov  es,ax
      $8E b, $D8 b, \ mov  ds,ax        ;<== 最後才動 DS 否則 [bx] 參考全部出錯！
      $67 b, $F3 b, \ a32 repz
      $66 b, $A5 b, \ movsd
      $07 b,        \ pop  es
      $1F b,        \ pop  ds
      $5D b,        \ pop  bp
      $CB b,        \ retf              ;<=== 注意!!! ret or retf
    endif farcall
    drop drop drop drop drop drop
  ;

  // ##HALT cpu HALT until any interrupt
* #halt \ [ -- ]
    do
      b" xxxxx " ##inline_assembly if
      \ $CC b, \ int3
        $f4 b,  // hlt
        $cb b,  // retf
      endif farcall
      ##key? if drop ret endif
    loop ;

* #cli \ [ -- ]
    b" xxxxx " ##inline_assembly if
    \ $CC b, \ int3
      $FA b, \ CLI
      $cb b, \ retf
    endif farcall ;

* #sti \ [ -- ]
    b" xxxxx " ##inline_assembly if
    \ $CC b, \ int3
      $FB b, \ STI
      $cb b, \ retf
    endif farcall ;

  ~~~~~~~~~~ B-COMMA Assembler commands ~~~~~~~~~~~~~~~~~~~~~~~~~
  #&b,segment b,here 04 + ; [ -- addr ]
  #&b,offset  b,here 02 + ; [ -- addr ]
  #b,segment! ##&b,segment swap pokew ; [ seg -- ]
  #b,offset!  ##&b,offset  swap pokew ; [ off -- ]
  #b,segment  ##&b,segment peekw ; [ -- seg ]
  #b,offset   ##&b,offset  peekw ; [ -- off ]
  #b,here@    b,here peekw ; [ -- here ]
  #b,here!    b,here swap pokew ;  [ here -- ]
  #b,skip     ##b,here@ + ##b,here! ; [ n -- ] 跳過幾個 bytes,填表時有用。
  #b,setup    0 ##b,here! ##b,offset! ##b,segment! ;   // [ seg offset -- ] initialize b, binary code compiler
* #inline_assembly  ##xDS swap over over ##b,setup dup peek $78 == ; [ offset -- ##xDS entry first_time? ]

  ~~~~~~~~~~~~ INT86, INT86X Registers ~~~~~~~~~~~~~~~~~~~~~~~~~
  #iAL iregs 00 + peek ; #iAH iregs 01 + peek ; #iBL iregs 02 + peek ; #iBH iregs 03 + peek ;
  #iCL iregs 04 + peek ; #iCH iregs 05 + peek ; #iDL iregs 06 + peek ; #iDH iregs 07 + peek ;
  #iAX iregs 00 + peekw ; #iBX iregs 02 + peekw ; #iCX iregs 04 + peekw ; #iDX iregs 06 + peekw ;
  #iSI iregs 08 + peekw ; #iDI iregs $A + peekw ; #oAL oregs 00 + peek ; #oAH oregs 01 + peek ;
  #oBL oregs 02 + peek ; #oBH oregs 03 + peek ; #oCL oregs 04 + peek ; #oCH oregs 05 + peek ;
  #oDL oregs 06 + peek ; #oDH oregs 07 + peek ; #oAX oregs 00 + peekw ; #oBX oregs 02 + peekw ;
  #oCX oregs 04 + peekw ; #oDX oregs 06 + peekw ; #oSI oregs 08 + peekw ; #oDI oregs $A + peekw ;
  #CY oregs $C + peek ; #FL oregs $E + peekw ; #ES sregs 00 + peekw ; #CS sregs 02 + peekw ;
  #SS sregs 04 + peekw ; #DS sregs 06 + peekw ; #iAL! iregs 00 + swap poke ; #iAH! iregs 01 + swap poke ;
  #iBL! iregs 02 + swap poke ; #iBH! iregs 03 + swap poke ; #iCL! iregs 04 + swap poke ; #iCH! iregs 05 + swap poke ;
  #iDL! iregs 06 + swap poke ; #iDH! iregs 07 + swap poke ; #iSI! iregs 08 + swap pokew ; #iDI! iregs $A + swap pokew ;
  #iAX! iregs 00 + swap pokew ; #iBX! iregs 02 + swap pokew ; #iCX! iregs 04 + swap pokew ; #iDX! iregs 06 + swap pokew ;
  #ES! sregs 00 + swap pokew ; #CS! sregs 02 + swap pokew ; #SS! sregs 04 + swap pokew ; #DS! sregs 06 + swap pokew ;
  #xDS read_msw 01 & pushfd drop 02 & 02 ^ AND if $40 else ##DS endif ; // PMode 時的 executable DS 定為 GDT 40h

  ______________________________________________________________________________________________
  Studying x86 Protected mode                 2008/7/13 23:01  H.C. Chen

  It was long ago the first time I tried to study x86 CPU protected mode,
  1992? or earlier. It was not successful. Too difficult and no book to
  refer. I tried again and again included the works on f39. I am so glad 
  that with Bochs and Alexei's tutorials we can finally handle protected 
  mode by F Language now. 

  Bochs : http://mfgkm-wks.wistron.com/RD/Software/bochs%E4%BD%BF%E7%94%A8%E6%89%8B%E8%A8%98.aspx
  Alexei's Proteted Mode Tutorials : http://elearnwksrd.wistron.com.cn/xms/index.php?view=content_show&id=772
  ______________________________________________________________________________________________
