#hi cr s" Hello World, Today is %d/%02d/%02d. how are you?" 02010 08 026 04 ##printf cr ;

// #e820 #e801 added in pmtools.f15
// #a20 #f1gb #fi1gb #fi2gb #fv1gb #fv2gb added in pmtools.f14
// #rdmsr #wrmsr #cpuid added in pmtools.f12  
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Studying x86 Protected mode                 2008/7/13 23:01  H.C. Chen

  It was long ago the first time I tried to study x86 CPU protected mode,
  1992? or earlier. It was not successful. Too difficult and no book to
  refer. I tried again and again included the works on f39 ... those
  happy but unsuccessful times. I am so glad that with Bochs and Alexei's
  tutorials we can finally handle protected mode by F Language now. Anything
  implementated by F Language are really well understood. Ahhhhh, very good!

  Bochs : http://mfgkm-wks.wistron.com/RD/Software/bochs%E4%BD%BF%E7%94%A8%E6%89%8B%E8%A8%98.aspx
  Alexei's Proteted Mode Tutorials : http://elearnwksrd.wistron.com.cn/xms/index.php?view=content_show&id=772

  ~~~~~ DEMO and sample codes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  // Use this macro to put QEMU and VMware DOS guest into power saving mode until any key pressed
  f51 pmtools.f05 ##halt

  // Enter Big Unreal Mode [ -- ]
  F51 pmtools.f04 ##big_real_mode
  // Then you can access entire 4G memory
  F51 nul $0 $20 $0000 $abcd $4567 fpoked     // poke $abcd4567 to $200000
  F51 nul $0 $20 $0000 fpeekd .s              // read it back
  F52 pmtools.f06 $10 $0000 ##xDD             // dump 256 bytes memory 0x100000

  Demo do loop count down feature and calling C library farmalloc() and farcoreleft()
  #far_malloc_test  // [ -- ]
     010 >A do
       A@ NOT ?break
       $1 $0 ##farmalloc .$ .$ ."   "  ##farcoreleft .$ .$ cr
     -loop A> DROP
  ;

  Moving memory blocks around 32bit addressing spaces
  f51 pmtools.f06 ##Big_real_mode $f $ff00 $10 $ff00 $0  $100 ##BigRealMOVSB  // move    256 bytes  from 0xfff00 to 0x10ff00
  f51 pmtools.f06 ##Big_real_mode $c $0000 $10 $0000 $1 $0000 ##BigRealMOVSD  // move $10000 dwouds from 0xc0000 to 0x100000 等於整個 c000 ~ f000 ROM 都搬過去

  Dump 256 bytes memory from $00200000 to screen
  f51 pmtools.f06 ##big_real_mode $20 $0 ##xDD

  ~~~~ Something from Alexei's TUT05, maybe useful ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  _old_IRQ xx #&old_IRQ_mask sfind @_old_IRQ ; array of two bytes
  _scancode x #scancode sfind @_scancode peek ; #scancode! sfind @_scancode swap poke ;
  _ticks xxxx #&ticks sfind @_ticks ; #&BIOS_timer $046c ;

  #port_8259M  $20 ;
  #port_8259S  $A0 ;
  #port_kbc_a  $60 ;

  #setup_PIC // [byte slave_vector, byte master_vector --] setup interrupt controllers' vector
    ##PORT_8259M $11 o       // * start 8259 initialization */
    ##PORT_8259M 01 + swap o // * master base interrupt vector */
    ##PORT_8259M 01 + $04  o // * bitmask for cascade on IRQ2 */
    ##PORT_8259M 01 + $01  o // * finish 8259 initialization */

    ##PORT_8259S $11 o
    ##PORT_8259S 01 + swap o // * slave base interrupt vector */
    ##PORT_8259S 01 + $02  o // * cascade on IRQ2 */
    ##PORT_8259S 01 + $01  o
  ;

  #EXC_HANDLER   // [exc_no cs ip error --]
    ##EXC_HANDLER_TUT05
  ;

  ~~~~ Protected Mode High level tools ~~~~~~~~~~~~~~~~~~~~
  [ high low -- ] dump 256 bytes from given 32bit address. Enter Big Real Mode in prior using this macro.
  example: f54 pmtools.f10 $f $ff00 ##xdd <= dump BIOS ending 256 bytes
* #xdd
     ##64k_offset peekw ##64k_segment peekw
     dup 016 *                  // high low buffer_off buffer_seg 210S
     swap $1000 / swap          // high low buffer_off 000S 210S
     rot 0 swap                 // high low 000S 210S 0 buffer_off
     L+                         // high low buffer_hi buffer_lo
     0 0256 04 / ##BigRealMOVSD //
     ##64k_segment peekw ##64k_offset peekw ##dd // seg off+256
     drop drop
     ;

  // TUT10 trick, allow DS ES to access 4G bytes flat space  [ -- ]
* #big_real_mode
    // Change the DS to a 4G flat space descripter
    ##DS 016 * ##DS 04096 / $FFFF 0 ##ACS_DATA  ##ATTR_16bits_4Gmax ##&GDT $10 + ##setup_GDT_entry
    ##PMode
    ##RMode
    ##a20  // open Fast A20 Gate
  ;
* #PMode
    read_msw 01 & if
    ." We should be in real mode first ... "
    ."CPU is already in PMode. System out of my control. Abort." cr exit
    endif
    // Setting up the GDTR register
    016 08 * 01 -  // length of GDT is n * 8 bytes - 1 小心搞清楚 GDT 要多大，目前保留了 16 個。 -Hcchen5600 2008/12/14 下午3:37
    0 ##DS 016 L* 0 ##&GDT L+ swap ##GDTR!   // [limit low high --]
    ##cli
    // Setting up the IDTR register
    // 進 Protected Mode 之前做，離開後要清掉。記得先 ##CLI。
    // IRQ 即使不用也最好要設定好 IDTR。 F47 會處理 CPU exceptions，你一定和我一樣常出錯，靠 CPU Protection 幫你抓 bug 很有用。
    $22 08 * 01 -     // length of IDT is $22 * 8bytes (INT00~INT21h), limit = length-1
    0 ##DS 016 L* 0 ##&IDT L+ swap ##IDTR!  // [limit low high --]
    // Entering PMode
    ##&old_CS ##CS pokew  ##&old_DS ##DS pokew  ##&old_ES ##ES pokew  ##&old_SS ##SS pokew // save real mode segments
    $08 ##CS! $10 ##DS! $10 ##ES! $18 ##SS! read_cr0 01 | write_cr0 setregs
    // in PMode now [ length -- ]
    ;
* #RMode
    // switching back to real mode
    read_cr0 $FFFE & write_cr0
    ##&old_SS peekw ##SS!  ##&old_ES peekw ##ES!  ##&old_DS peekw ##DS!  ##&old_CS peekw ##CS! // restore
    setregs
    // in real mode now
    // restore IDTR register
    $3FF 0 0 ##IDTR!
    ##STI
    ;
  /* Segment desciptor definition */
  typedef struct {
     word limit,                    #GDT.limit    00 + ;
          base_l;                   #GDT.base_l   02 + ;
     byte base_m,                   #GDT.base_m   04 + ;
          access,                   #GDT.access   05 + ;
          attribs,                  #GDT.attribs  06 + ;
          base_h; } DESCR_SEG;      #GDT.base_h   07 + ;

  Don't change this line, it stores variables. ==> [ _gdt_base_low ww , _gdt_base_high ww , _gdt_limit_low ww , _gdt_limit_high ww , _gdt_access ww , _gdt_attribute ww , _gdt(n)_addr ww -- ]
* #setup_GDT_entry
    sfind @_gdt(n)_addr    swap pokew  // 土土地把 stack arguments 存成 variables
    sfind @_gdt_attribute  swap pokew
    sfind @_gdt_access     swap pokew
    sfind @_gdt_limit_high swap pokew
    sfind @_gdt_limit_low  swap pokew
    sfind @_gdt_base_high  swap pokew
    sfind @_gdt_base_low   swap pokew

    sfind @_gdt(n)_addr peekw ##GDT.attribs  sfind @_gdt_attribute peekw sfind @_gdt_limit_high peekw | poke
    sfind @_gdt(n)_addr peekw ##GDT.access   sfind @_gdt_access    peekw poke
    sfind @_gdt(n)_addr peekw ##GDT.limit    sfind @_gdt_limit_low peekw pokew
    sfind @_gdt(n)_addr peekw ##GDT.base_h   sfind @_gdt_base_high peekw >> >> >> >> >> >> >> >> poke
    sfind @_gdt(n)_addr peekw ##GDT.base_l   sfind @_gdt_base_low  peekw pokew
    sfind @_gdt(n)_addr peekw ##GDT.base_m   sfind @_gdt_base_high peekw $ff & poke
  ;

  /* Interrupt desciptor definition */
  typedef struct   {
    word offset_l,                  #IDT.offset_l    00 + ;
         selector;                  #IDT.selector    02 + ;
    byte param_cnt,                 #IDT.param_cnt   04 + ;
         access;                    #IDT.access      05 + ;
    word offset_h; } DESCR_INT;     #IDT.offset_h    06 + ;

  Don't change this line, it stores variables ==> [ _idt_selector ww, _idt_offset_low ww, _idt_offset_high ww, _idt_access ww, _idt_param_cnt ww, _idt(n)_addr ww -- ]
* #setup_IDT_entry
    sfind @_idt(n)_addr     swap pokew  // 土土地把 stack arguments 存成 variables
    sfind @_idt_param_cnt   swap pokew
    sfind @_idt_access      swap pokew
    sfind @_idt_offset_high swap pokew
    sfind @_idt_offset_low  swap pokew
    sfind @_idt_selector    swap pokew
    sfind @_idt(n)_addr peekw ##IDT.param_cnt  sfind @_idt_param_cnt   peekw poke
    sfind @_idt(n)_addr peekw ##IDT.access     sfind @_idt_access      peekw poke
    sfind @_idt(n)_addr peekw ##IDT.offset_h   sfind @_idt_offset_high peekw pokew
    sfind @_idt(n)_addr peekw ##IDT.offset_l   sfind @_idt_offset_low  peekw pokew
    sfind @_idt(n)_addr peekw ##IDT.selector   sfind @_idt_selector    peekw pokew
  ;
* #init_descriptor_tables   // [ -- ] init GDT IDT , TUT04 TUT05 common

    // setup_GDT
    0 0 0 0 0 0 ##&GDT ##setup_GDT_entry
    ##CS 016 * ##CS 04096 / $FFFF 0 ##ACS_CODE  ##ATTR_16bits_1Mmax ##&GDT $08 + ##setup_GDT_entry
    ##DS 016 * ##DS 04096 / $FFFF 0 ##ACS_DATA  ##ATTR_16bits_1Mmax ##&GDT $10 + ##setup_GDT_entry
    ##SS 016 * ##SS 04096 / $FFFF 0 ##ACS_STACK ##ATTR_16bits_1Mmax ##&GDT $18 + ##setup_GDT_entry
    $8000      $000B        $FFFF 0 ##ACS_DATA  ##ATTR_16bits_1Mmax ##&GDT $20 + ##setup_GDT_entry
    ##DS 016 * ##DS 04096 / $FFFF 0 ##ACS_CODE  ##ATTR_16bits_1Mmax ##&GDT $40 + ##setup_GDT_entry // Executable DS copy for farcall assembly codes
    ##DS 016 * ##DS 04096 / $FFFF 0 ##ACS_DATA  ##ATTR_16bits_1Mmax ##&GDT $48 + ##setup_GDT_entry // reserved for ##pMOVEx  source
    ##DS 016 * ##DS 04096 / $FFFF 0 ##ACS_DATA  ##ATTR_16bits_1Mmax ##&GDT $50 + ##setup_GDT_entry // reserved for ##pMOVEx  destination

    // setup_IDT
    // setup_idt_entry [selector offset_low offset_high access param_cnt &idt(n) - ]
    $08 &isr_wrapper_table 02 $00 * + peekw 0 ##ACS_INT 0 ##&IDT 08 $00 * + ##setup_IDT_entry   // INT 00h
    $08 &isr_wrapper_table 02 $01 * + peekw 0 ##ACS_INT 0 ##&IDT 08 $01 * + ##setup_IDT_entry   // INT 01h
    $08 &isr_wrapper_table 02 $02 * + peekw 0 ##ACS_INT 0 ##&IDT 08 $02 * + ##setup_IDT_entry   // INT 02h
    $08 &isr_wrapper_table 02 $03 * + peekw 0 ##ACS_INT 0 ##&IDT 08 $03 * + ##setup_IDT_entry   // INT 03h
    $08 &isr_wrapper_table 02 $04 * + peekw 0 ##ACS_INT 0 ##&IDT 08 $04 * + ##setup_IDT_entry   // INT 04h
    $08 &isr_wrapper_table 02 $05 * + peekw 0 ##ACS_INT 0 ##&IDT 08 $05 * + ##setup_IDT_entry   // INT 05h
    $08 &isr_wrapper_table 02 $06 * + peekw 0 ##ACS_INT 0 ##&IDT 08 $06 * + ##setup_IDT_entry   // INT 06h
    $08 &isr_wrapper_table 02 $07 * + peekw 0 ##ACS_INT 0 ##&IDT 08 $07 * + ##setup_IDT_entry   // INT 07h
    $08 &isr_wrapper_table 02 $08 * + peekw 0 ##ACS_INT 0 ##&IDT 08 $08 * + ##setup_IDT_entry   // INT 08h
    $08 &isr_wrapper_table 02 $09 * + peekw 0 ##ACS_INT 0 ##&IDT 08 $09 * + ##setup_IDT_entry   // INT 09h
    $08 &isr_wrapper_table 02 $0a * + peekw 0 ##ACS_INT 0 ##&IDT 08 $0a * + ##setup_IDT_entry   // INT 0ah
    $08 &isr_wrapper_table 02 $0b * + peekw 0 ##ACS_INT 0 ##&IDT 08 $0b * + ##setup_IDT_entry   // INT 0bh
    $08 &isr_wrapper_table 02 $0c * + peekw 0 ##ACS_INT 0 ##&IDT 08 $0c * + ##setup_IDT_entry   // INT 0ch
    $08 &isr_wrapper_table 02 $0d * + peekw 0 ##ACS_INT 0 ##&IDT 08 $0d * + ##setup_IDT_entry   // INT 0dh
    $08 &isr_wrapper_table 02 $0e * + peekw 0 ##ACS_INT 0 ##&IDT 08 $0e * + ##setup_IDT_entry   // INT 0eh
    $08 &isr_wrapper_table 02 $0f * + peekw 0 ##ACS_INT 0 ##&IDT 08 $0f * + ##setup_IDT_entry   // INT 0fh
    $08 &isr_wrapper_table 02 $10 * + peekw 0 ##ACS_INT 0 ##&IDT 08 $10 * + ##setup_IDT_entry   // INT 10h
    $08 &isr_wrapper_table 02 $11 * + peekw 0 ##ACS_INT 0 ##&IDT 08 $11 * + ##setup_IDT_entry   // INT 11h
    $08 &isr_wrapper_table 02 $12 * + peekw 0 ##ACS_INT 0 ##&IDT 08 $12 * + ##setup_IDT_entry   // INT 12h
    $08 &isr_wrapper_table 02 $13 * + peekw 0 ##ACS_INT 0 ##&IDT 08 $13 * + ##setup_IDT_entry   // INT 13h
    $08 &isr_wrapper_table 02 $14 * + peekw 0 ##ACS_INT 0 ##&IDT 08 $14 * + ##setup_IDT_entry   // INT 14h
    $08 &isr_wrapper_table 02 $15 * + peekw 0 ##ACS_INT 0 ##&IDT 08 $15 * + ##setup_IDT_entry   // INT 15h
    $08 &isr_wrapper_table 02 $16 * + peekw 0 ##ACS_INT 0 ##&IDT 08 $16 * + ##setup_IDT_entry   // INT 16h
    $08 &isr_wrapper_table 02 $17 * + peekw 0 ##ACS_INT 0 ##&IDT 08 $17 * + ##setup_IDT_entry   // INT 17h
    $08 &isr_wrapper_table 02 $18 * + peekw 0 ##ACS_INT 0 ##&IDT 08 $18 * + ##setup_IDT_entry   // INT 18h
    $08 &isr_wrapper_table 02 $19 * + peekw 0 ##ACS_INT 0 ##&IDT 08 $19 * + ##setup_IDT_entry   // INT 19h
    $08 &isr_wrapper_table 02 $1a * + peekw 0 ##ACS_INT 0 ##&IDT 08 $1a * + ##setup_IDT_entry   // INT 1ah
    $08 &isr_wrapper_table 02 $1b * + peekw 0 ##ACS_INT 0 ##&IDT 08 $1b * + ##setup_IDT_entry   // INT 1bh
    $08 &isr_wrapper_table 02 $1c * + peekw 0 ##ACS_INT 0 ##&IDT 08 $1c * + ##setup_IDT_entry   // INT 1ch
    $08 &isr_wrapper_table 02 $1d * + peekw 0 ##ACS_INT 0 ##&IDT 08 $1d * + ##setup_IDT_entry   // INT 1dh
    $08 &isr_wrapper_table 02 $1e * + peekw 0 ##ACS_INT 0 ##&IDT 08 $1e * + ##setup_IDT_entry   // INT 1eh
    $08 &isr_wrapper_table 02 $1f * + peekw 0 ##ACS_INT 0 ##&IDT 08 $1f * + ##setup_IDT_entry   // INT 1fh
    $08 &isr_wrapper_table 02 $20 * + peekw 0 ##ACS_INT 0 ##&IDT 08 $20 * + ##setup_IDT_entry   // INT 20h
    $08 &isr_wrapper_table 02 $21 * + peekw 0 ##ACS_INT 0 ##&IDT 08 $21 * + ##setup_IDT_entry   // INT 21h
  ;

  Read  GDTR [-- Limit low high]
* #GDTR 0 0 0 &tos 04 - read_gdtr ;

  Write GDTR [Limit low high -- ]
* #GDTR! &tos 04 - write_gdtr drop drop drop ;

  Read  IDTR [-- Limit low high]
* #IDTR 0 0 0 &tos 04 - read_idtr ;

  Write IDTR [Limit low high -- ]
* #IDTR! &tos 04 - write_idtr drop drop drop ;

  Memory allocations for GDT IDT
  _GDT_ 00      08      10      18      20      28      30      38      40      48      50      58      60      68      70      78   end
  _IDT_ 0       1       2       3       4       5       6       7       8       9       A       B       C       D       E       F    end
        12345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678
        12345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678
  #&GDT sfind @_GDT_ ;
  #&IDT sfind @_IDT_ ;

  Save-Restore real mode system resources
  _old_CS_ xx #&old_CS sfind @_old_CS_ ;
  _old_DS_ xx #&old_DS sfind @_old_DS_ ;
  _old_ES_ xx #&old_ES sfind @_old_ES_ ;
  _old_SS_ xx #&old_SS sfind @_old_SS_ ;

  ~~~~ Descripter (segment) definitions for protected mode programming ~~~~~~~~~~~~~~~~~~~~
  #ATTR_GRANULARITY_BYTE $00 ;
  #ATTR_GRANULARITY_4K   $80 ;
  #ATTR_32BIT        $40 ;
  #ATTR_16BIT        $00 ;

  #ATTR_16bits_1Mmax  ##ATTR_GRANULARITY_BYTE ##ATTR_16BIT | ;
  #ATTR_16bits_4Gmax  ##ATTR_GRANULARITY_4K   ##ATTR_16BIT | $f | ;
  #ATTR_32bits_4Gmax  ##ATTR_GRANULARITY_4K   ##ATTR_32BIT | $f | ;

  #ACS_PRESENT $80 ;  present segment
  #ACS_CSEG    $18 ;  code segment
  #ACS_DSEG    $10 ;  data segment
  #ACS_CONFORM $04 ;  conforming segment
  #ACS_READ    $02 ;  readable segment
  #ACS_WRITE   $02 ;  writable segment
  #ACS_RING0   $00 ;  ring 0
  #ACS_RING1   $20 ;  ring 1
  #ACS_RING2   $40 ;  ring 2
  #ACS_RING3   $60 ;  ring 3

  #ACS_CODE  ##ACS_PRESENT ##ACS_CSEG ##ACS_READ  ##ACS_RING0 | | | ;
  #ACS_DATA  ##ACS_PRESENT ##ACS_DSEG ##ACS_WRITE ##ACS_RING0 | | | ;
  #ACS_STACK ##ACS_PRESENT ##ACS_DSEG ##ACS_WRITE ##ACS_RING0 | | | ;

  #ACS_I_GATE16 $06 ; 16 bits interrupt gate
  #ACS_I_GATE32 ##ACS_INT_GATE16 $08 | ; 32 bits interrupt gate

  #ACS_INT  ##ACS_PRESENT ##ACS_I_GATE16 ##ACS_RING0 | | ;  present 16bits interrupt gate in ring0


  ~~~~~~~~~~ funcall words (C library) ~~~~~~~~~~~~~
* #farcoreleft // [ -- low high ] check DOS's remaining memory
     00 062 map funcall ;
* #farmalloc // [ high16 low16 -- offset segment ] get DOS's memory block
     swap 02 060 map funcall ;
* #printf  000 map funcall drop drop ;  [ string arg1 arg2 ... n -- ] printf , n is the number of given arguments
* #sprintf 002 map funcall drop ; [ dest string arg1 arg2 ... n1 -- n2 ] sprintf , n1 is the number of given arguments. n2 is length

  ~~~~~~~~~~ Useful Tools ~~~~~~~~~~~~~~~~~~~~~~~~~
* #KEY? $0100 ##iAX! $16 int86 ##FL $40 & if 0 ret endif $0000 ##iAX! $16 int86 ##oAX 01 ; [-- [AX] key?]
* #max over over < if swap endif drop ; [ a b - max] a b are int (signed)
  #.seg:off s" %04x:%04x " -rot 03 ##printf ; [ seg off -- ] print seg:off
  #dump16hex  // [ seg off -- seg off' ] print 16 hex, return new offset
    016 -rot do       \ 16 seg off
    over over fpeek   \ 16 seg off c
    s" %02x " swap 02 \ 16 seg off $ c 02
    ##printf          \ 16 seg off
    01 +              \ 16 seg off++
    rot 01 - dup      \ seg off++ 16-- 16--
    dup 08 == if ." - " endif
    0 == ?break       \ seg off++ 16--
    -rot              \ 16-- seg off++
    loop drop         \ seg off'
    ;
  #emit16  // [ seg off -- seg off' ] emit 16 characters, return new offset
    016 -rot do     \ 16 seg off
    over over fpeek \ 16 seg off c
    dup 032 < if drop '. endif \ c'
    s" %1c" swap 02 \ 16 seg off $ c 02
    ##printf        \ 16 seg off
    01 +            \ 16 seg off++
    rot 01 - dup    \ seg off++ 16-- 16--
    0 == ?break     \ seg off++ 16--
    -rot            \ 16-- seg off++
    loop drop       \ seg off'
    ;
* #d // [ seg off -- seg off' ] dump 16 bytes memroy, return new offset
    over over ##.seg:off over over ."  " ##dump16hex drop drop ."  " ##emit16 cr
    over over ##.seg:off over over ."  " ##dump16hex drop drop ."  " ##emit16 cr
    ;
* #dd    08 >A do A@ not ?break ##d -loop A> DROP ;
* #ddd   ##dd ##dd ##dd ##dd ;
* #dddd  ##ddd ##ddd ##ddd ##ddd ;
* #ddddd ##dddd ##dddd ##dddd ##dddd ##dddd ##dddd ##dddd ##dddd ##dddd ##dddd ##dddd ##dddd ##dddd ##dddd ##dddd ##dddd ;

  #64k_segment s" xx " ;
  #64k_offset  s" xx " ;
* #autoexec
    ." Init descriptor tables . . . " ##init_descriptor_tables ." done" cr
    ." Allocate 64k buffer for ##xD commands . . . "
    $0001 $0010 ##farmalloc    // [high low -- fp_off fp_seg]
    ##64k_segment swap    01 + pokew // adjust to segment+1:0000
    ##64k_offset  swap $fff0 & pokew
    ##64k_segment peekw 01 == if ." failed !!" exit else ." done" cr endif
    clearcache
    ;

  ~~~~~~~~~~ farcall assembly code words (in data segment script buffer) ~~~~~~~~~~~~~

  // ##scasd used CPU SCASD instruction to find given dward data in the given real mode space.
  // [ start_seg start_off length/4 target_low target_high -- (offset true) | false ]
  // Example : f54 pmtools.f10 $f000 $0 $4000 $535F $5F4D ##scasd .s <== 傳回 [ -- addr 1 ] f000:addr 果真指在 _SM_ 處
* #scasd
    s" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx " ##inline_assembly if
    \ $CC b,                        \ int3
      $55 b,                        \ push         bp
      $8B b, $EC b,                 \ mov          bp,sp
      $8B b, $5E b, $06 b,          \ mov          bx,[bp+06]
      $FC b,                        \ cld
      $8B b, $47 b, $F8 b,          \ mov          ax,[bx-08]
      $8E b, $C0 b,                 \ mov          es,ax
      $8B b, $7F b, $FA b,          \ mov          di,[bx-06]
      $8B b, $4F b, $FC b,          \ mov          cx,[bx-04]
      $66 b, $8B b, $47 b, $FE b,   \ mov          eax,[bx-02]
      $F2 b, $66 b, $AF b,          \ repnz scasd
      $89 b, $7F b, $F8 b,          \ mov          [bx-08],di
      $89 b, $4F b, $FA b,          \ mov          [bx-06],cx
      $5D b,                        \ pop          bp
      $CB b,                        \ retf
    endif // [ start_segment[bx-8] start_offset[bx-6] length[bx-4] target_low[bx-2] target_high[bx] -- di cx length target_low target_high ]
    farcall drop drop drop if 04 - 01 else drop 0 endif ;

#a20   // open Fast A20 Gate ,Add by Lawrence Tang 2009/08/03
 $2401 ##iAX! $15 int86 ;

#f1gb  // Demo fill about 1GB memory space to pattern 55555555 ,Add by Lawrence Tang 2009/08/03
 ##big_real_mode
 $0 $10 $0 $5555 $5555 fpoked
 $0 $10 $0 fpeekd 
 $10 $0 $10 $4 $fd7 $95b7 ##BigRealMOVSD
 ." Fill 0x100000 to 0x3F6E56DF Memory space to pattern 55555555 done:) " ;

#fi1gb // LS12 Intel 1GB SKU memory space fill tool ,Add by Lawrence Tang 2009/08/06
 ##big_real_mode
 $0 $10 $0 $5555 $5555 fpoked
 $0 $10 $0 fpeekd 
 $10 $0 $10 $4 $fd7 $95b7 ##BigRealMOVSD
 ." Fill 0x100000 to 0x3F6E56DF Memory space to pattern 55555555 done:) " ;

#fi2gb // LS12 Intel 2GB SKU memory space fill tool ,Add by Lawrence Tang 2009/08/06
 ##big_real_mode
 $0 $10 $0 $5555 $5555 fpoked
 $0 $10 $0 fpeekd 
 $10 $0 $10 $4 $1fd7 $95b7 ##BigRealMOVSD
 ." Fill 0x100000 to 0x7F6E56DF Memory space to pattern 55555555 done:) " ;

#fv1gb // LS12 VIA   1GB SKU memory space fill tool ,Add by Lawrence Tang 2009/08/06
 ##big_real_mode
 $0 $10 $0 $5555 $5555 fpoked
 $0 $10 $0 fpeekd 
 $10 $0 $10 $4 $bf7 $95bb ##BigRealMOVSD
 ." Fill 0x100000 to 0x2FEE56EF Memory space to pattern 55555555 done:) " ;

#fv2gb // LS12 VIA   2GB SKU memory space fill tool ,Add by Lawrence Tang 2009/08/06
 ##big_real_mode
 $0 $10 $0 $5555 $5555 fpoked
 $0 $10 $0 fpeekd 
 $10 $0 $10 $4 $1bf7 $95bb ##BigRealMOVSD
 ." Fill 0x100000 to 0x6FEE56EF Memory space to pattern 55555555 done:) " ;

  // ##BigRealMOVSB "move string byte" You need to enter big_real_mode in prior using this macro
  // [ from_high from_low to_high to_low length_high length_low -- ] all 3 arguments are 32 bit
  // Example : f54.exe pmtools.f10  $c $0 $10 $0 $4 $0 ##BigRealMOVSB .s <== 用 QEMU 或 Bochs 檢查 $100000~$13ffff 等於 C000:0 ~ F000:ffff
  //           f54.exe pmtools.f10 $10 $0 $10 $1 $4 $0 ##BigRealMOVSB .s <== 整片 $100000~$140001 都刷成與 $100000 同值, Apple II 的小技巧。
* #BigRealMOVSB
    swap >a >a swap >a >a swap a> a> a> a>  // high-low swap
    s" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxyyyy " ##inline_assembly if
      // [ from_low[bx-10] from_high[bx-8] to_low[bx-6] to_high[bx-4] length_low[bx-2] length_high[bx]  -- ]
      $55 b,        \ push bp
      $89 b, $E5 b, \ mov  bp,sp
      $8B b, $5E b, \
      $06 b,        \ mov  bx,[bp+6]    ;<== TOS at [bp+6]
      $1E b,        \ push ds
      $06 b,        \ push es           ;<== 注意!!! 常忘了 b,
      $FC b,        \ cld
      $66 b, $8B b, \
      $4F b, $FE b, \ mov  ecx,[bx-2]   ; length_low length_high
      $66 b, $8B b, \
      $77 b, $F6 b, \ mov  esi,[bx-10]  ; from_low from_high
      $66 b, $8B b, \
      $7F b, $FA b, \ mov  edi,[bx-6]   ; to_low to_high
      $31 b, $C0 b, \ xor  ax,ax
      $8E b, $C0 b, \ mov  es,ax
      $8E b, $D8 b, \ mov  ds,ax        ;<== 最後才動 DS 否則 [bx] 參考全部出錯！
      $67 b,        \ a32
      $F3 b, $A4 b, \ repz movsb
      $07 b,        \ pop  es
      $1F b,        \ pop  ds
      $5D b,        \ pop  bp
      $CB b,        \ retf              ;<=== 注意!!! ret or retf
    endif farcall
    drop drop drop drop drop drop
  ;

  // ##BigRealMOVSD "move string dword" You need to enter big_real_mode in prior using this macro
  // [ from_high from_low to_high to_low length_high length_low -- ] all 3 arguments are 32 bit
  // Example : f54.exe pmtools.f10  $c $0 $10 $0 $1 $0 ##BigRealMOVSD .s <== 用 QEMU 或 Bochs 檢查 $100000~$13ffff 等於 C000:0 ~ F000:ffff
  //           f54.exe pmtools.f10 $10 $0 $10 $4 $1 $0 ##BigRealMOVSD .s <== 整片 $100000~$140003 都刷成與 $100000 同值, Apple II 的小技巧。
* #BigRealMOVSD
    swap >a >a swap >a >a swap a> a> a> a>  // high-low swap
    s" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxyyyy " ##inline_assembly if
      // [ from_low[bx-10] from_high[bx-8] to_low[bx-6] to_high[bx-4] length_low[bx-2] length_high[bx]  -- ]
      $55 b,        \ push bp
      $89 b, $E5 b, \ mov  bp,sp
      $8B b, $5E b, \
      $06 b,        \ mov  bx,[bp+6]    ;<== TOS
      $1E b,        \ push ds
      $06 b,        \ push es           ;<== 注意!!! 常忘了 b,
      $FC b,        \ cld
      $66 b, $8B b, \
      $4F b, $FE b, \ mov  ecx,[bx-2]   ; length_low length_high
      $66 b, $8B b, \
      $77 b, $F6 b, \ mov  esi,[bx-10]  ; from_low from_high
      $66 b, $8B b, \
      $7F b, $FA b, \ mov  edi,[bx-6]   ; to_low to_high
      $31 b, $C0 b, \ xor  ax,ax
      $8E b, $C0 b, \ mov  es,ax
      $8E b, $D8 b, \ mov  ds,ax        ;<== 最後才動 DS 否則 [bx] 參考全部出錯！
      $67 b, $F3 b, \ a32 repz
      $66 b, $A5 b, \ movsd
      $07 b,        \ pop  es
      $1F b,        \ pop  ds
      $5D b,        \ pop  bp
      $CB b,        \ retf              ;<=== 注意!!! ret or retf
    endif farcall
    drop drop drop drop drop drop
  ;

  // ##HALT cpu HALT until any interrupt
* #halt \ [ -- ]
    do
      s" xxx " ##inline_assembly if
      \ $CC b, \ int3
        $f4 b,  // hlt
        $cb b,  // retf
      endif farcall
      ##key? if drop ret endif
    loop ;

* #cli \ [ -- ]
    s" xxx " ##inline_assembly if
    \ $CC b, \ int3
      $FA b, \ CLI
      $cb b, \ retf
    endif farcall ;

* #sti \ [ -- ]
    s" xxx " ##inline_assembly if
    \ $CC b, \ int3
      $FB b, \ STI
      $cb b, \ retf
    endif farcall ;

* #rdmsr \ [ $0 $0 ecx_low ecx_high -- edx_low edx_high eax_low eax_high ]  EDX:EAX ↘ MSR[ECX]  //Add by Lawrence Tang 2009/03/09
    s" xxxxxxxxxxxxxxxxxxxxxx " ##inline_assembly if
       $55 b,                       \ push bp
       $89 b, $E5 b,                \ mov bp,sp
       $8B b, $5E b, $06 b,         \ mov bx,[bp+6]    ;TOS of f stack
       $66 b, $8B b, $4F b, $FE b,  \ mov ecx,[bx-2]   ;ecx_low ecx_high
       $0F b, $32 b,                \ RDMSR
       $66 b, $89 b, $57 b, $FA b,  \ mov [bx-6],edx   ;save edx to forth main stack   
       $66 b, $89 b, $47 b, $FE b,  \ mov [bx-2],eax   ;save eax to forth main stack
       $5D b,                       \ pop bp
       $CB b,                       \ retf
    endif farcall ;

* #wrmsr \ [ ecx_low ecx_high edx_low edx_high eax_low eax_high -- ]  MSR[ECX] ↘ EDX:EAX  //Add by Lawrence Tang 2009/03/09
    s" xxxxxxxxxxxxxxxxxxxxxx " ##inline_assembly if
       $55 b,                       \ push bp
       $89 b, $E5 b,                \ mov bp,sp
       $8B b, $5E b, $06 b,         \ mov bx,[bp+6]    ;TOS of f stack
       $66 b, $8B b, $4F b, $F6 b,  \ mov ecx,[bx-10]  ;ecx_low ecx_high
       $66 b, $8B b, $57 b, $FA b,  \ mov edx,[bx-6]   ;edx_low edx_high
       $66 b, $8B b, $47 b, $FE b,  \ mov eax,[bx-2]   ;eax_low eax_high  //Modify $4F b, to $47 b, 代碼抄錯了~ 版本更新為f12 2009/03/12 Lawrence
       $0F b, $30 b,                \ WRMSR
       $5D b,                       \ pop bp
       $CB b,                       \ retf
    endif farcall 
    drop drop drop drop drop drop ;

* #cpuid \ [ eax_low eax_high $0 $0 ecx_low ecx_high $0 $0 -- eax_low eax_high ebx_low ebx_high ecx_low ecx_high edx_low edx_high ] //Add by Lawrence Tang 2009/03/10
     s" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx " ##inline_assembly if
        $CC b,                       \ int 3 for debug
        $55 b,                       \ push bp
        $89 b, $E5 b,                \ mov bp,sp
        $8B b, $5E b, $06 b,         \ mov bx,[bp+6]    ;TOS of f stack
        $66 b, $8B b, $47 b, $F2 b,  \ mov eax,[bx-14]  ;eax_low eax_high
        $66 b, $8B b, $4F b, $FA b,  \ mov ecx,[bx-6]   ;ecx_low ecx_high
        $0F b, $A2 b,                \ CPUID
        $66 b, $53 b,                \ push ebx
        $8B b, $5E b, $06 b,         \ mov bx,[bp+6]
        $66 b, $89 b, $47 b, $F2 b,  \ mov [bx-14],eax  ;save eax to forth main stack
        $66 b, $58 b,                \ pop eax
        $66 b, $89 b, $47 b, $F6 b,  \ mov [bx-10],eax  ;save ebx to forth main stack
        $66 b, $89 b, $4F b, $FA b,  \ mov [bx-6],ecx   ;save ecx to forth main stack
        $66 b, $89 b, $57 b, $FE b,  \ mov [bx-2],edx   ;save edx to forth main stack
        $5D b,                       \ pop bp
        $CB b,                       \ retf
     endif farcall ;

* #e820 \ [ $0 $0 -- EBX_low EBX_high ] //Use int 15 EAX=e820 to get system memory map.Add by Lawrence Tang 2009/08/12
     s" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx " ##inline_assembly if
        $CC b,                                      \ int 3 for debug
        $55 b,                                      \ push bp     
        $89 b, $E5 b,                               \ mov bp,sp
        $8B b, $76 b, $06 b,                        \ mov si,[bp+6]
        $B8 b, $00 b, $50 b,                        \ mov ax,5000h
        $8E b, $C0 b,                               \ mov es,ax
        $66 b, $B8 b, $20 b, $E8 b, $00 b, $00 b,   \ mov eax,0e820h
        $66 b, $BA b, $50 b, $41 b, $4D b, $53 b,   \ mov edx,534d4150h
        $66 b, $8B b, $5C b, $FE b,                 \ mov ebx,[si-2]
        $66 b, $B9 b, $14 b, $00 b, $00 b, $00 b,   \ mov ecx,014h
        $BF b, $00 b, $00 b,                        \ mov di,0h
        $CD b, $15 b,                               \ int 15h
        $66 b, $89 b, $5C b, $FE b,                 \ mov [si-2],ebx
        $5D b,                                      \ pop bp
        $CB b,                                      \ retf
     endif farcall ;

* #e801 \ [ $0 $0 $0 $0 -- AX BX CX DX ] //Use int 15 AX=e801 to get memory size for large configurations.Add by Lawrence Tang 2009/08/14
     s" xxxxxxxxxxxxxxxxxxxxxxxxx " ##inline_assembly if
        $CC b,                                      \ int 3 for debug
        $55 b,                                      \ push bp     
        $89 b, $E5 b,                               \ mov bp,sp
        $8B b, $76 b, $06 b,                        \ mov si,[bp+6]
        $B8 b, $01 b, $E8 b,                        \ mov ax,0e801h
        $CD b, $15 b,                               \ int 15h
        $89 b, $44 b, $FA b,                        \ mov [si-6],ax
        $89 b, $5C b, $FC b,                        \ mov [si-4],bx
        $89 b, $4C b, $FE b,                        \ mov [si-2],cx
        $89 b, $14 b,                               \ mov [si],dx
        $5D b,                                      \ pop bp
        $CB b,                                      \ retf
     endif farcall ;
        
  ~~~~~~~~~~ B-COMMA Assembler commands ~~~~~~~~~~~~~~~~~~~~~~~~~
  #&b,segment b,here 04 + ; [ -- addr ]
  #&b,offset  b,here 02 + ; [ -- addr ]
  #b,segment! ##&b,segment swap pokew ; [ seg -- ]
  #b,offset!  ##&b,offset  swap pokew ; [ off -- ]
  #b,segment  ##&b,segment peekw ; [ -- seg ]
  #b,offset   ##&b,offset  peekw ; [ -- off ]
  #b,here@    b,here peekw ; [ -- here ]
  #b,here!    b,here swap pokew ;  [ here -- ]
  #b,setup    0 ##b,here! ##b,offset! ##b,segment! ;   // [ seg offset -- ] initialize b, binary code compiler
* #inline_assembly  ##xDS swap over over ##b,setup dup peek $78 == ; [ offset -- ##xDS entry first_time? ]

  ~~~~~~~~~~~~ INT86, INT86X Registers ~~~~~~~~~~~~~~~~~~~~~~~~~
  #iAL iregs 00 + peek ; #iAH iregs 01 + peek ; #iBL iregs 02 + peek ; #iBH iregs 03 + peek ;
  #iCL iregs 04 + peek ; #iCH iregs 05 + peek ; #iDL iregs 06 + peek ; #iDH iregs 07 + peek ;
  #iAX iregs 00 + peekw ; #iBX iregs 02 + peekw ; #iCX iregs 04 + peekw ; #iDX iregs 06 + peekw ;
  #iSI iregs 08 + peekw ; #iDI iregs $A + peekw ; #oAL oregs 00 + peek ; #oAH oregs 01 + peek ;
  #oBL oregs 02 + peek ; #oBH oregs 03 + peek ; #oCL oregs 04 + peek ; #oCH oregs 05 + peek ;
  #oDL oregs 06 + peek ; #oDH oregs 07 + peek ; #oAX oregs 00 + peekw ; #oBX oregs 02 + peekw ;
  #oCX oregs 04 + peekw ; #oDX oregs 06 + peekw ; #oSI oregs 08 + peekw ; #oDI oregs $A + peekw ;
  #CY oregs $C + peek ; #FL oregs $E + peekw ; #ES sregs 00 + peekw ; #CS sregs 02 + peekw ;
  #SS sregs 04 + peekw ; #DS sregs 06 + peekw ; #iAL! iregs 00 + swap poke ; #iAH! iregs 01 + swap poke ;
  #iBL! iregs 02 + swap poke ; #iBH! iregs 03 + swap poke ; #iCL! iregs 04 + swap poke ; #iCH! iregs 05 + swap poke ;
  #iDL! iregs 06 + swap poke ; #iDH! iregs 07 + swap poke ; #iSI! iregs 08 + swap pokew ; #iDI! iregs $A + swap pokew ;
  #iAX! iregs 00 + swap pokew ; #iBX! iregs 02 + swap pokew ; #iCX! iregs 04 + swap pokew ; #iDX! iregs 06 + swap pokew ;
  #ES! sregs 00 + swap pokew ; #CS! sregs 02 + swap pokew ; #SS! sregs 04 + swap pokew ; #DS! sregs 06 + swap pokew ;
  #xDS read_msw 01 & pushfd drop 02 & 02 ^ AND if $40 else ##DS endif ; // PMode 時的 executable DS 定為 GDT 40h
